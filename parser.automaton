State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On prog shift to state 111
-- On expr shift to state 112
## Reductions:

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . expr LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 107
## Reductions:

State 2:
## Known stack suffix:
## VECTOR
## LR(1) items:
expr -> VECTOR . LBRACKET expr_list_comma RBRACKET [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## VECTOR LBRACKET
## LR(1) items:
expr -> VECTOR LBRACKET . expr_list_comma RBRACKET [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_comma shift to state 101
-- On expr shift to state 103
## Reductions:

State 4:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> TRUE

State 5:
## Known stack suffix:
## TRANSPOSE
## LR(1) items:
expr -> TRANSPOSE . LPAREN expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## TRANSPOSE LPAREN
## LR(1) items:
expr -> TRANSPOSE LPAREN . expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 99
## Reductions:

State 7:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> STRING

State 8:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 98
## Reductions:

State 9:
## Known stack suffix:
## MATRIX
## LR(1) items:
expr -> MATRIX . LBRACKET mat_row_list RBRACKET [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## MATRIX LBRACKET
## LR(1) items:
expr -> MATRIX LBRACKET . mat_row_list RBRACKET [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On mat_row_list shift to state 93
-- On expr_list_semicolon shift to state 95
-- On expr shift to state 70
## Reductions:

State 11:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 91
## Reductions:

State 12:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_semicolon shift to state 89
-- On expr shift to state 70
## Reductions:

State 13:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> INT

State 14:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 84
## Reductions:

State 15:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> IDENT . ASSIGN expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> IDENT . LPAREN args RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 16
-- On ASSIGN shift to state 82
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> IDENT
** Conflict on LPAREN

State 16:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
expr -> IDENT LPAREN . args RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_comma shift to state 73
-- On expr shift to state 75
-- On args shift to state 80
## Reductions:

State 17:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . IDENT ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On IDENT shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## FOR IDENT
## LR(1) items:
expr -> FOR IDENT . ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On ASSIGN shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## FOR IDENT ASSIGN
## LR(1) items:
expr -> FOR IDENT ASSIGN . INT DOT_3 INT LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On INT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## FOR IDENT ASSIGN INT
## LR(1) items:
expr -> FOR IDENT ASSIGN INT . DOT_3 INT LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On DOT_3 shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## FOR IDENT ASSIGN INT DOT_3
## LR(1) items:
expr -> FOR IDENT ASSIGN INT DOT_3 . INT LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On INT shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## FOR IDENT ASSIGN INT DOT_3 INT
## LR(1) items:
expr -> FOR IDENT ASSIGN INT DOT_3 INT . LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LBRACE shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## FOR IDENT ASSIGN INT DOT_3 INT LBRACE
## LR(1) items:
expr -> FOR IDENT ASSIGN INT DOT_3 INT LBRACE . expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_semicolon shift to state 68
-- On expr shift to state 70
## Reductions:

State 24:
## Known stack suffix:
## FLOAT
## LR(1) items:
expr -> FLOAT . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> FLOAT

State 25:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> FALSE

State 26:
## Known stack suffix:
## DIM_V
## LR(1) items:
expr -> DIM_V . LPAREN expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## DIM_V LPAREN
## LR(1) items:
expr -> DIM_V LPAREN . expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 66
## Reductions:

State 28:
## Known stack suffix:
## DIM_2_M
## LR(1) items:
expr -> DIM_2_M . LPAREN expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## DIM_2_M LPAREN
## LR(1) items:
expr -> DIM_2_M LPAREN . expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 64
## Reductions:

State 30:
## Known stack suffix:
## DIM_1_M
## LR(1) items:
expr -> DIM_1_M . LPAREN expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## DIM_1_M LPAREN
## LR(1) items:
expr -> DIM_1_M LPAREN . expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 62
## Reductions:

State 32:
## Known stack suffix:
## DETERMINANT
## LR(1) items:
expr -> DETERMINANT . LPAREN expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## DETERMINANT LPAREN
## LR(1) items:
expr -> DETERMINANT LPAREN . expr RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## DETERMINANT LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> DETERMINANT LPAREN expr . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 35
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 35:
## Known stack suffix:
## DETERMINANT LPAREN expr RPAREN
## LR(1) items:
expr -> DETERMINANT LPAREN expr RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> DETERMINANT LPAREN expr RPAREN

State 36:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr PLUS expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr PLUS expr

State 38:
## Known stack suffix:
## expr MULT
## LR(1) items:
expr -> expr MULT . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr MULT expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr MULT expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr MULT expr

State 40:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr MOD expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr MOD expr

State 42:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr DIV expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr DIV expr

State 44:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr OR expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA
--   reduce production expr -> expr OR expr

State 46:
## Known stack suffix:
## expr NE
## LR(1) items:
expr -> expr NE . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## expr NE expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr NE expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT NE MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr NE expr

State 48:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr MINUS expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr MINUS expr

State 50:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr LT expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT NE MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr LT expr

State 52:
## Known stack suffix:
## expr LE
## LR(1) items:
expr -> expr LE . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## expr LE expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr LE expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT NE MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr LE expr

State 54:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr GT expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT NE MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr GT expr

State 56:
## Known stack suffix:
## expr GE
## LR(1) items:
expr -> expr GE . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## expr GE expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr GE expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT NE MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr GE expr

State 58:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr EQUAL expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT NE MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE EQUAL EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr EQUAL expr

State 60:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr AND expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> expr AND expr

State 62:
## Known stack suffix:
## DIM_1_M LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> DIM_1_M LPAREN expr . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 63
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 63:
## Known stack suffix:
## DIM_1_M LPAREN expr RPAREN
## LR(1) items:
expr -> DIM_1_M LPAREN expr RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> DIM_1_M LPAREN expr RPAREN

State 64:
## Known stack suffix:
## DIM_2_M LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> DIM_2_M LPAREN expr . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 65
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 65:
## Known stack suffix:
## DIM_2_M LPAREN expr RPAREN
## LR(1) items:
expr -> DIM_2_M LPAREN expr RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> DIM_2_M LPAREN expr RPAREN

State 66:
## Known stack suffix:
## DIM_V LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> DIM_V LPAREN expr . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 67
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 67:
## Known stack suffix:
## DIM_V LPAREN expr RPAREN
## LR(1) items:
expr -> DIM_V LPAREN expr RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> DIM_V LPAREN expr RPAREN

State 68:
## Known stack suffix:
## FOR IDENT ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon
## LR(1) items:
expr -> FOR IDENT ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon . RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RBRACE shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## FOR IDENT ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon RBRACE
## LR(1) items:
expr -> FOR IDENT ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon RBRACE . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> FOR IDENT ASSIGN INT DOT_3 INT LBRACE expr_list_semicolon RBRACE

State 70:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ SEMICOLON PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr_list_semicolon -> expr . SEMICOLON expr_list_semicolon [ SEMICOLON RBRACKET RBRACE ]
expr_list_semicolon -> expr . SEMICOLON [ SEMICOLON RBRACKET RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 71
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 71:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
expr_list_semicolon -> expr SEMICOLON . expr_list_semicolon [ SEMICOLON RBRACKET RBRACE ]
expr_list_semicolon -> expr SEMICOLON . [ SEMICOLON RBRACKET RBRACE ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_semicolon shift to state 72
-- On expr shift to state 70
## Reductions:
-- On SEMICOLON RBRACKET RBRACE
--   reduce production expr_list_semicolon -> expr SEMICOLON

State 72:
## Known stack suffix:
## expr SEMICOLON expr_list_semicolon
## LR(1) items:
expr_list_semicolon -> expr SEMICOLON expr_list_semicolon . [ SEMICOLON RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACKET RBRACE
--   reduce production expr_list_semicolon -> expr SEMICOLON expr_list_semicolon

State 73:
## Known stack suffix:
## expr_list_comma
## LR(1) items:
args -> expr_list_comma . expr [ RPAREN ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr_list_comma expr
## LR(1) items:
args -> expr_list_comma expr . [ RPAREN ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:
-- On RPAREN
--   reduce production args -> expr_list_comma expr

State 75:
## Known stack suffix:
## expr
## LR(1) items:
args -> expr . COMMA args [ RPAREN ]
expr -> expr . PLUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MINUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MULT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . DIV expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MOD expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . AND expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . OR expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . LT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . GT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . LE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . GE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . NE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . EQUAL expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr_list_comma -> expr . COMMA expr_list_comma [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
expr_list_comma -> expr . COMMA expr [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On COMMA shift to state 76
-- On AND shift to state 60
## Reductions:

State 76:
## Known stack suffix:
## expr COMMA
## LR(1) items:
args -> expr COMMA . args [ RPAREN ]
expr_list_comma -> expr COMMA . expr_list_comma [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
expr_list_comma -> expr COMMA . expr [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_comma shift to state 77
-- On expr shift to state 78
-- On args shift to state 79
## Reductions:

State 77:
## Known stack suffix:
## expr COMMA expr_list_comma
## LR(1) items:
args -> expr_list_comma . expr [ RPAREN ]
expr_list_comma -> expr COMMA expr_list_comma . [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 74
## Reductions:
-- On VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IDENT FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT
--   reduce production expr_list_comma -> expr COMMA expr_list_comma
** Conflict on VECTOR TRUE TRANSPOSE STRING MATRIX LPAREN LBRACE INT IDENT FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT

State 78:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
args -> expr . COMMA args [ RPAREN ]
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE STRING PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr_list_comma -> expr . COMMA expr_list_comma [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
expr_list_comma -> expr . COMMA expr [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
expr_list_comma -> expr COMMA expr . [ WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On COMMA shift to state 76
-- On AND shift to state 60
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE STRING NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE DIM_V DIM_2_M DIM_1_M DETERMINANT
--   reduce production expr_list_comma -> expr COMMA expr

State 79:
## Known stack suffix:
## expr COMMA args
## LR(1) items:
args -> expr COMMA args . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production args -> expr COMMA args

State 80:
## Known stack suffix:
## IDENT LPAREN args
## LR(1) items:
expr -> IDENT LPAREN args . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## IDENT LPAREN args RPAREN
## LR(1) items:
expr -> IDENT LPAREN args RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> IDENT LPAREN args RPAREN

State 82:
## Known stack suffix:
## IDENT ASSIGN
## LR(1) items:
expr -> IDENT ASSIGN . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## IDENT ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> IDENT ASSIGN expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA
--   reduce production expr -> IDENT ASSIGN expr

State 84:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> IF expr . THEN expr ELSE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ THEN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
## Transitions:
-- On THEN shift to state 85
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 85:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . MULT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . DIV expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . MOD expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . AND expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . OR expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> IF expr THEN expr . ELSE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . GT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . LE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . GE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . NE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
expr -> expr . EQUAL expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On ELSE shift to state 87
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 87:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> IF expr THEN expr ELSE expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> IF expr THEN expr ELSE expr

State 89:
## Known stack suffix:
## LBRACE expr_list_semicolon
## LR(1) items:
expr -> LBRACE expr_list_semicolon . RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RBRACE shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## LBRACE expr_list_semicolon RBRACE
## LR(1) items:
expr -> LBRACE expr_list_semicolon RBRACE . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> LBRACE expr_list_semicolon RBRACE

State 91:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> LPAREN expr . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
## Transitions:
-- On RPAREN shift to state 92
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 92:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> LPAREN expr RPAREN

State 93:
## Known stack suffix:
## MATRIX LBRACKET mat_row_list
## LR(1) items:
expr -> MATRIX LBRACKET mat_row_list . RBRACKET [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RBRACKET shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## MATRIX LBRACKET mat_row_list RBRACKET
## LR(1) items:
expr -> MATRIX LBRACKET mat_row_list RBRACKET . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> MATRIX LBRACKET mat_row_list RBRACKET

State 95:
## Known stack suffix:
## expr_list_semicolon
## LR(1) items:
mat_row_list -> expr_list_semicolon . [ RBRACKET ]
mat_row_list -> expr_list_semicolon . SEMICOLON mat_row_list [ RBRACKET ]
## Transitions:
-- On SEMICOLON shift to state 96
## Reductions:
-- On RBRACKET
--   reduce production mat_row_list -> expr_list_semicolon

State 96:
## Known stack suffix:
## expr_list_semicolon SEMICOLON
## LR(1) items:
mat_row_list -> expr_list_semicolon SEMICOLON . mat_row_list [ RBRACKET ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On mat_row_list shift to state 97
-- On expr_list_semicolon shift to state 95
-- On expr shift to state 70
## Reductions:

State 97:
## Known stack suffix:
## expr_list_semicolon SEMICOLON mat_row_list
## LR(1) items:
mat_row_list -> expr_list_semicolon SEMICOLON mat_row_list . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production mat_row_list -> expr_list_semicolon SEMICOLON mat_row_list

State 98:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . PLUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MINUS expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MULT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . DIV expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . MOD expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . AND expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . OR expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> NOT expr . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GT expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . LE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . GE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . NE expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
expr -> expr . EQUAL expr [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET OR NOT MATRIX LPAREN LBRACE INT IF IDENT FOR FLOAT FALSE EOF ELSE DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> NOT expr

State 99:
## Known stack suffix:
## TRANSPOSE LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ RPAREN PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV AND ]
expr -> TRANSPOSE LPAREN expr . RPAREN [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 100
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 100:
## Known stack suffix:
## TRANSPOSE LPAREN expr RPAREN
## LR(1) items:
expr -> TRANSPOSE LPAREN expr RPAREN . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> TRANSPOSE LPAREN expr RPAREN

State 101:
## Known stack suffix:
## VECTOR LBRACKET expr_list_comma
## LR(1) items:
expr -> VECTOR LBRACKET expr_list_comma . RBRACKET [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RBRACKET shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## VECTOR LBRACKET expr_list_comma RBRACKET
## LR(1) items:
expr -> VECTOR LBRACKET expr_list_comma RBRACKET . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> VECTOR LBRACKET expr_list_comma RBRACKET

State 103:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MINUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MULT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . DIV expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MOD expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . AND expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . OR expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . LT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . GT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . LE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . GE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . NE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . EQUAL expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr_list_comma -> expr . COMMA expr_list_comma [ RBRACKET ]
expr_list_comma -> expr . COMMA expr [ RBRACKET ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On COMMA shift to state 104
-- On AND shift to state 60
## Reductions:

State 104:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_list_comma -> expr COMMA . expr_list_comma [ RBRACKET ]
expr_list_comma -> expr COMMA . expr [ RBRACKET ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_comma shift to state 105
-- On expr shift to state 106
## Reductions:

State 105:
## Known stack suffix:
## expr COMMA expr_list_comma
## LR(1) items:
expr_list_comma -> expr COMMA expr_list_comma . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production expr_list_comma -> expr COMMA expr_list_comma

State 106:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . PLUS expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MINUS expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MULT expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . DIV expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . MOD expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . AND expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . OR expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . LT expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . GT expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . LE expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . GE expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . NE expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr -> expr . EQUAL expr [ RBRACKET PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL DIV COMMA AND ]
expr_list_comma -> expr . COMMA expr_list_comma [ RBRACKET ]
expr_list_comma -> expr . COMMA expr [ RBRACKET ]
expr_list_comma -> expr COMMA expr . [ RBRACKET ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On COMMA shift to state 104
-- On AND shift to state 60
## Reductions:
-- On RBRACKET
--   reduce production expr_list_comma -> expr COMMA expr

State 107:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . MULT expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . DIV expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . MOD expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . AND expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . OR expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . LT expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . GT expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . LE expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . GE expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . NE expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> expr . EQUAL expr [ PLUS OR NE MULT MOD MINUS LT LE LBRACE GT GE EQUAL DIV AND ]
expr -> WHILE expr . LBRACE expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On LBRACE shift to state 108
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 108:
## Known stack suffix:
## WHILE expr LBRACE
## LR(1) items:
expr -> WHILE expr LBRACE . expr_list_semicolon RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VECTOR shift to state 2
-- On TRUE shift to state 4
-- On TRANSPOSE shift to state 5
-- On STRING shift to state 7
-- On NOT shift to state 8
-- On MATRIX shift to state 9
-- On LPAREN shift to state 11
-- On LBRACE shift to state 12
-- On INT shift to state 13
-- On IF shift to state 14
-- On IDENT shift to state 15
-- On FOR shift to state 17
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On DIM_V shift to state 26
-- On DIM_2_M shift to state 28
-- On DIM_1_M shift to state 30
-- On DETERMINANT shift to state 32
-- On expr_list_semicolon shift to state 109
-- On expr shift to state 70
## Reductions:

State 109:
## Known stack suffix:
## WHILE expr LBRACE expr_list_semicolon
## LR(1) items:
expr -> WHILE expr LBRACE expr_list_semicolon . RBRACE [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
-- On RBRACE shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## WHILE expr LBRACE expr_list_semicolon RBRACE
## LR(1) items:
expr -> WHILE expr LBRACE expr_list_semicolon RBRACE . [ WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND ]
## Transitions:
## Reductions:
-- On WHILE VECTOR TRUE TRANSPOSE THEN STRING SEMICOLON RPAREN RBRACKET PLUS OR NOT NE MULT MOD MINUS MATRIX LT LPAREN LE LBRACE INT IF IDENT GT GE FOR FLOAT FALSE EQUAL EOF ELSE DIV DIM_V DIM_2_M DIM_1_M DETERMINANT COMMA AND
--   reduce production expr -> WHILE expr LBRACE expr_list_semicolon RBRACE

State 111:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 112:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . MULT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . DIV expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . MOD expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . AND expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . OR expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . LT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . GT expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . LE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . GE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . NE expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
expr -> expr . EQUAL expr [ PLUS OR NE MULT MOD MINUS LT LE GT GE EQUAL EOF DIV AND ]
prog -> expr . EOF [ # ]
## Transitions:
-- On PLUS shift to state 36
-- On OR shift to state 44
-- On NE shift to state 46
-- On MULT shift to state 38
-- On MOD shift to state 40
-- On MINUS shift to state 48
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQUAL shift to state 58
-- On EOF shift to state 113
-- On DIV shift to state 42
-- On AND shift to state 60
## Reductions:

State 113:
## Known stack suffix:
## expr EOF
## LR(1) items:
prog -> expr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> expr EOF

